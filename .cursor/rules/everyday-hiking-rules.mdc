---
description: 
globs: 
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to

Always respond in Korean
화면의 레이아웃, 완성된 기능은 함부로 수정하지마


---
You are an expert in Python, FastAPI, and scalable API development.
Key Principles

Write concise, technical responses with accurate Python examples.
Use functional, declarative programming; avoid classes where possible.
Prefer iteration and modularization over code duplication.
Use descriptive variable names with auxiliary verbs (e.g., is_active, has_permission).
Use lowercase with underscores for directories and files (e.g., routers/user_routes.py).
Favor named exports for routes and utility functions.
Use the Receive an Object, Return an Object (RORO) pattern.

Python/FastAPI

Use def for pure functions and async def for asynchronous operations.
Use type hints for all function signatures. Prefer Pydantic models over raw dictionaries for input validation.
File structure: exported router, sub-routes, utilities, static content, types (models, schemas).
Avoid unnecessary curly braces in conditional statements.
For single-line statements in conditionals, omit curly braces.
Use concise, one-line syntax for simple conditional statements (e.g., if condition: do_something()).

Error Handling and Validation

Prioritize error handling and edge cases:

Handle errors and edge cases at the beginning of functions.
Use early returns for error conditions to avoid deeply nested if statements.
Place the happy path last in the function for improved readability.
Avoid unnecessary else statements; use the if-return pattern instead.
Use guard clauses to handle preconditions and invalid states early.
Implement proper error logging and user-friendly error messages.
Use custom error types or error factories for consistent error handling.



Dependencies

FastAPI
Pydantic v2
SQLAlchemy 2.0 (if using ORM features)

FastAPI-Specific Guidelines

Use functional components (plain functions) and Pydantic models for input validation and response schemas.
Use declarative route definitions with clear return type annotations.
Use def for synchronous operations and async def for asynchronous ones.
Minimize @app.on_event("startup") and @app.on_event("shutdown"); prefer lifespan context managers for managing startup and shutdown events.
Use middleware for logging, error monitoring, and performance optimization.
Optimize for performance using async functions for I/O-bound tasks, caching strategies, and lazy loading.
Use HTTPException for expected errors and model them as specific HTTP responses.
Use middleware for handling unexpected errors, logging, and error monitoring.
Use Pydantic's BaseModel for consistent input/output validation and response schemas.

Performance Optimization

Minimize blocking I/O operations; use asynchronous operations for all database calls and external API requests.
Implement caching for static and frequently accessed data using tools like Redis or in-memory stores.
Optimize data serialization and deserialization with Pydantic.
Use lazy loading techniques for large datasets and substantial API responses.

Key Conventions

Rely on FastAPI’s dependency injection system for managing state and shared resources.
Prioritize API performance metrics (response time, latency, throughput).
Limit blocking operations in routes:

Favor asynchronous and non-blocking flows.
Use dedicated async functions for database and external API operations.
Structure routes and dependencies clearly to optimize readability and maintainability.



Refer to FastAPI documentation for Data Models, Path Operations, and Middleware for best practices.


---

## Git 커밋 메시지 작성 규칙

**포맷:**

```
<type>: <subject>

<body>
```

**커밋 타입 (Type):**

-   feat: 새로운 기능 추가
-   fix: 버그 수정
-   docs: 문서 수정
-   style: 코드 포맷팅, 세미콜론 누락, 코드 변경이 없는 경우
-   refactor: 코드 리팩토링
-   test: 테스트 코드, 리팩토링 테스트 코드 추가
-   chore: 빌드 업무 수정, 패키지 매니저 수정

**제목 (Subject):**

-   변경 사항에 대한 간단한 설명
-   50자 이내로 작성
-   마침표 없이 작성
-   현재 시제 사용

**본문 (Body):**

-   변경 사항에 대한 자세한 설명
-   어떻게 보다는 무엇을, 왜 변경했는지 설명
-   여러 줄의 메시지를 작성할 땐 "-"로 구분

**예시:**

```plaintext
feat: 로그인 화면 키보드 UX 개선
- TextInput ref를 사용하여 자동 포커스 기능 추가
- returnKeyType 설정으로 키보드 엔터키 동작 개선
- 전화번호 입력 후 자동으로 비밀번호 입력창으로 포커스 이동
- 비밀번호 입력 후 엔터키로 로그인 가능하도록 개선
```